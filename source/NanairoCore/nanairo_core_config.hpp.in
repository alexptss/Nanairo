/*!
  \file nanairo_core_config.hpp
  \author Sho Ikeda

  Copyright (c) 2015-2016 Sho Ikeda
  This software is released under the MIT License.
  http://opensource.org/licenses/mit-license.php
  */

#ifndef NANAIRO_NANAIRO_CORE_CONFIG_HPP
#define NANAIRO_NANAIRO_CORE_CONFIG_HPP

// Standard C++ library
#include <cstdint>
#include <type_traits>
// Zisc
#include "@nanairo_core_sampler_header_path@"

// Forward declaration
namespace zisc {
template <typename, uint> class Point;
template <typename, uint> class Vector;
template <typename, uint, uint> class Matrix;
template <uint, uint> class AlignedMemoryPool;
template <typename, uint> class ArithmeticArray;
} // namespace zisc

namespace nanairo {

//! \addtogroup Core
//! \{

// General types
using int8 = std::int8_t;
using int16 = std::int16_t;
using int32 = std::int32_t;
using int64 = std::int64_t;
using uint = unsigned int;
using uint8 = std::uint8_t;
using uint16 = std::uint16_t;
using uint32 = std::uint32_t;
using uint64 = std::uint64_t;
using Float = @NANAIRO_FLOATING_POINT_TYPE@;

// System
using MemoryPool = zisc::AlignedMemoryPool<
    @NANAIRO_MEMORY_POOL_SIZE@, // The memory pool size
    std::alignment_of<void*>::value>; // The memory alignment

// LinearAlgebra
using Vector3 = zisc::Vector<Float, 3>;
using Vector2 = zisc::Vector<Float, 2>;
using Point3 = zisc::Point<Float, 3>;
using Point2 = zisc::Point<Float, 2>;
using Matrix4x4 = zisc::Matrix<Float, 4, 4>;
using Matrix3x3 = zisc::Matrix<Float, 3, 3>;

// Sampling
using SamplerType = @nanairo_core_sampler_type@;
template <uint kSampleSize>
using IntensitySamples = zisc::ArithmeticArray<Float, kSampleSize>;

/*!
  \brief This class contains properties used in Core module
  */
class CoreConfig
{
 public:
  //! Return the blue wavelength
  static constexpr uint16 blueWavelength() noexcept;

  //! Return the green wavelength
  static constexpr uint16 greenWavelength() noexcept;

  //! Retun the red wavelength
  static constexpr uint16 redWavelength() noexcept;

  //! Return the shortest wavelength
  static constexpr uint16 shortestWavelength() noexcept;

  //! Return the longest wavelength
  static constexpr uint16 longestWavelength() noexcept;

  //! Return the wavelength range
  static constexpr uint wavelengthRange() noexcept;

  //! Return the wavelength resolution
  static constexpr uint wavelengthResolution() noexcept;

  //! Return the spectra size
  static constexpr uint spectraSize() noexcept;

  //! Return the max num of objects contained in a BVH node
  static constexpr uint maxNumOfNodeObjects() noexcept;

  //! Return the size of wavelength sample
  static constexpr uint wavelengthSampleSize() noexcept;

  //! Return the exponent of MIS heuristic
  static constexpr uint misHeuristicBeta() noexcept;
};

//! \} Core

} // namespace nanairo

#include "NanairoCore/nanairo_core_config-inl.hpp"

#endif // NANAIRO_NANAIRO_CORE_CONFIG_HPP
